# 编译器设定和编译选项
CC = gcc
FLEX = flex
BISON = bison
CFLAGS = -std=c99

# 编译目标：src目录下的所有.c文件
CFILES = $(shell find ./ -name "*.c")
OBJS = $(CFILES:.c=.o)
LFILE = $(shell find ./ -name "*.l")
YFILE = $(shell find ./ -name "*.y")
LFC = $(shell find ./ -name "*.l" | sed s/[^/]*\\.l/lex.yy.c/)
YFC = $(shell find ./ -name "*.y" | sed s/[^/]*\\.y/syntax.tab.c/)
LFO = $(LFC:.c=.o)
YFO = $(YFC:.c=.o)

# Target to build the parser
parser: syntax $(filter-out $(LFO),$(OBJS))
	$(CC) -o parser $(filter-out $(LFO),$(OBJS)) -lfl 

# Target to build the parser syntax rules
syntax: lexical syntax-c
	$(CC) -c $(YFC) -o $(YFO)
	
# Target to generate lexer source files from lexer file (.l)
lexical: $(LFILE)
	$(FLEX) -o $(LFC) $(LFILE)

# Target to generate parser source files from parser file (.y)
syntax-c: $(YFILE)
	$(BISON) -o $(YFC) -d -v -t $(YFILE)

# Include dependencies files generated by GCC
-include $(patsubst %.o, %.d, $(OBJS))

# 定义的一些伪目标
# Target to run test cases
.PHONY: test
test:
	./parser ./Test/1.cmm
	./parser ./Test/2.cmm
	./parser ./Test/3.cmm
	./parser ./Test/4.cmm
	./parser ./Test/5.cmm
	./parser ./Test/6.cmm
	./parser ./Test/7.cmm
	./parser ./Test/8.cmm
	./parser ./Test/9.cmm
	./parser ./Test/10.cmm
	./parser ./Test/11.cmm
	./parser ./Test/12.cmm
	./parser ./Test/13.cmm
	./parser ./Test/14.cmm
	./parser ./Test/15.cmm
	./parser ./Test/16.cmm
	./parser ./Test/17.cmm
	./parser ./Test/x1.cmm
	./parser ./Test/x2.cmm
	./parser ./Test/x3.cmm
	./parser ./Test/x4.cmm
	./parser ./Test/x5.cmm
	./parser ./Test/x6.cmm


# Target to clean the project
.PHONY: clean
clean:
	rm -f parser lex.yy.c syntax.tab.c syntax.tab.h syntax.output
	rm -f $(OBJS) $(OBJS:.o=.d)
	rm -f $(LFC) $(YFC) $(YFC:.c=.h)
	rm -f *~
	


